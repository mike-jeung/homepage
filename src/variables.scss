$globalWidthConstant: 750;
$marginFraction: 0.04;
$topmarginFraction: 0.03;

$bentoBoxUnit: 165px;
$bentoBoxTotal: $bentoBoxUnit * 5;
$bentoBGColor: #FFFFFF;
$bentoBorderRadius: 22px;
$bentoMobBorderRadius: 12px;
$bentoSmBorderRadius: 8px;
$bentoStdPad: 2.5rem;
$bentoMobPad: 1.4rem;
$bentoColGap: 15px;
$bentoRowGap: 15px;
$bentoColHalfGap: calc($bentoColGap / 2);
$bentoRowHalfGap: calc($bentoRowGap / 2);


$boxPadding: 2.5rem;
$boxMobPadding: 1.4rem;

$boxMinHt: 450px;

$globalWidth2: calc($bentoBoxTotal + 6rem);
$globalWidth: $globalWidthConstant * 1px;
$padPercent: $marginFraction * 100%;
$padtopPercent: $topmarginFraction * 100%;
$padMobile: 15px;

$baseBGColor: #EEEEEE;



$formFieldBG: #FFFFFF;
$focusColor: #3cf;
$focusColorDk: #09C;
$formLabelColor: #666;
$formBtnColor: #09C;
$formBtnTxtColor: #FFF;

$formFieldBG2: #c0f0ff;
$focusColor2: #3cf;
$focusColorDk2: #09C;
$formLabelColor2: #666;
$formBtnColor2: #09C;
$formBtnTxtColor2: #09c;

$formBorderRadius: 10px;
$innerFormBorderRadius: 8px;

$formFieldBG3: rgba(183,219,234,0.3);

// $chatBG: #cfe4ea;
$chatBG: rgba(183,219,234,0.5);
//$chatBG: #fff7d9;

$menuArrowSVG: '<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 629 332" viewBox="0 0 629 332"><path d="M300.5 1.7c1.6-.4 3.3-.7 5-1-1.7.2-3.4.6-5 1zm51.6 11.9c-1.3-1.1-2.6-2.1-4-3.1 1.4.9 2.7 2 4 3.1zm1 .8c-.3-.3-.7-.6-1-.8.1.1.2.1.3.2l.7.6z"/><path d="M614.8 311c-2.2 2.7-4.7 5.1-7.3 7.3-21.5 18.1-53.5 18.6-75.8 0L314.5 136 97.3 318.2c-25 20.9-62.2 17.7-83.1-7.3C3.7 298.4-.7 282.9.6 267.8c1.4-15 8.4-29.5 20.9-40l255.1-214c1.9-1.6 3.9-3.1 6.1-4.5.4-.3.8-.5 1.3-.8.9-.5 1.7-1 2.6-1.5.4-.2.8-.4 1.2-.7.7-.4 1.5-.7 2.2-1.1.3-.2.6-.3 1-.4.4-.2.8-.3 1.2-.5.4-.2.8-.3 1.2-.5 1.6-.6 3.2-1.1 4.8-1.6l1.2-.3 1.2-.3c1.6-.4 3.3-.7 5-1 .4-.1.8-.1 1.3-.2 1.2-.2 2.5-.3 3.7-.4.5 0 1-.1 1.5-.1h3.6c.9 0 1.8.1 2.7.1.9.1 1.9.1 2.8.2.5.1.9.1 1.4.2 1.4.2 2.8.4 4.2.7.5.1 1 .2 1.4.3.9.2 1.8.5 2.7.7.5.1.9.3 1.4.4.5.2.9.3 1.4.4.4.1.9.3 1.3.5h.1c.4.2.9.3 1.3.5.4.1.7.3 1.1.4 1 .4 2 .8 2.9 1.3l1.2.6c.4.2.8.4 1.1.6.4.2.8.4 1.1.6.4.2.7.4 1 .6 0 0 .1.1.2.1l3.3 2.1c1.5 1 2.9 2.1 4.3 3.3l.7.6.2.2 254.1 213.2c24.9 21.3 28.1 58.5 7.2 83.5z" style="fill:#96b2bf"/><path d="M276.6 13.7c1.9-1.6 3.9-3.1 6-4.4-2 1.4-4.1 2.9-6 4.4l-1 .8c.4-.2.7-.5 1-.8zm7.3-5.2c.8-.5 1.7-1 2.6-1.5-.9.5-1.8 1-2.6 1.5zm38.6-8c1.4.2 2.8.4 4.2.7-1.5-.2-2.8-.5-4.2-.7z"/></svg>';
$menuCloseX: '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="none"><path fill="#CCC" d="M0 2.652 2.652 0l26.515 26.515-2.652 2.652z"/><path fill="#CCC" d="M2.652 29.167 0 26.515 26.515 0l2.652 2.652z"/></svg>';
$iconPause: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 83 83"><rect width="21" height="80.76" x="13.18" y=".77" rx="4" ry="4" style="fill:#036;stroke-width:0"/><rect width="21" height="80.76" x="48.18" y=".77" rx="4" ry="4" style="fill:#036;stroke-width:0"/></svg>';
$iconPlay:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 83 83"><path d="m69.49 37.68-52-36.37c-2.67-1.54-6 .38-6 3.46v72.75c0 3.08 3.33 5 6 3.46l52-36.37c2.67-1.54 2.67-5.39 0-6.93Z" style="fill:#036;stroke-width:0"/></svg>';

$bp_tablet: 920px;
$bp_mobile: 599px;

@function svg-url($svg, $colormap: false) {
    //  Add namespace if missing
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    @if $colormap {
    	@each $orig, $replace in $colormap {
    		$svg: str-replace($svg, $orig, $replace);
    	}
    }
    //  Chunk up string avoids "stack level too deep" error
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(calc(str-length($svg) / $slice));
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);


        
        //   Encode
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}
            
//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search); 
    @if $index { 
        @return str-slice($string, 1, $index - 1) + $replace + 
            str-replace(str-slice($string, $index + 
            str-length($search)), $search, $replace); 
    }
    @return $string; 
}